# docker-compose.yml - Kedai Kopi Multi-Database Architecture

services:
  # MongoDB - Document Store
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: cafe_analytics
    volumes:
      - mongodb_data:/data/db
      - ./init-scripts/mongodb:/docker-entrypoint-initdb.d
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cassandra - Column Store
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    restart: always
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "BigDataCluster"
      CASSANDRA_DC: "datacenter1"
      CASSANDRA_RACK: "rack1"
      CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
      # Reduced memory settings for development
      MAX_HEAP_SIZE: "512M"
      HEAP_NEWSIZE: "128M"
      JVM_OPTS: "-Xmx512M -Xms512M"
      # Faster startup settings
      CASSANDRA_START_RPC: "true"
      CASSANDRA_BROADCAST_ADDRESS: "127.0.0.1"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./init-scripts/cassandra:/docker-entrypoint-initdb.d
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 120s
    # Add memory and CPU limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis - Caching and Session Store
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # New Python Aggregator Service - REST API for Query System
  aggregator:
    build:
      context: ./aggregator
      dockerfile: Dockerfile
    container_name: cafe-aggregator
    restart: always
    ports:
      - "5000:5000"
    environment:
      # Database connections
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/cafe_analytics?authSource=admin
      CASSANDRA_HOSTS: cassandra
      CASSANDRA_KEYSPACE: cafe_analytics
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Application settings
      FLASK_ENV: development
      FLASK_DEBUG: "1"
      PYTHONPATH: /app

      # Performance settings
      QUERY_TIMEOUT: 30
      MAX_RESULTS: 1000
      CACHE_TTL: 300

    depends_on:
      mongodb:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./aggregator:/app
      - ./data:/app/data
    networks:
      - bigdata-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database Administration Tools
  mongo-express:
    image: mongo-express:1.0.0
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb
    networks:
      - bigdata-network
    profiles:
      - admin-tools

volumes:
  mongodb_data:
    driver: local
  cassandra_data:
    driver: local
  redis_data:
    driver: local

networks:
  bigdata-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
